{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos\\\\FrontEndInventorySystem\\\\src\\\\Empleado\\\\BusquedaEmpleado.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Swal from 'sweetalert2';\nimport DetalleBusquedaEmpleado from \"./DetalleBusquedaEmpleado\";\nimport EncabezadoEmpleado from \"./EncabezadoEmpleado\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BusquedaEmpleado = props => {\n  _s();\n  const [Gestor, setGestor] = useState({\n    Nombre_Empleado: '',\n    Correo_Empleado: ''\n  });\n  const navigate = useNavigate();\n  const teclaPresionada = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setGestor({\n      ...Gestor,\n      [name]: value\n    });\n  };\n  const ClickBtnNuevo = () => {\n    props.CambiarIdEmpleado(0);\n    navigate(\"/Empleado/DetalleEmpleado\");\n  };\n  const DetalleEmpleado = Correo_Empleado => {\n    props.CambiarIdEmpleado(Correo_Empleado);\n    navigate(\"/Empleado/DetalleEmpleado\");\n  };\n  const ClickBtnDelete = async ID_Empleado => {\n    let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/EliminarEmpleado?ID_Empleado=${ID_Empleado}`;\n    try {\n      let Result = await fetch(URL, {\n        method: 'DELETE'\n      }).then(async response => {\n        if (!response.ok) {\n          console.log(\"No Ok - ClickBtnDelete\");\n          throw new Error(response.statusText);\n        }\n        return await response.json();\n      }).catch(error => {\n        console.log(error);\n      });\n      if (Result.Codigo >= 0) {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Registro de empleado eliminado exitosamente\",\n          showConfirmButton: false,\n          timer: 1500\n        });\n        ClickBtnBuscar();\n      } else {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text: Result.Mensaje\n        });\n        //console.log(Sucursales.Mensaje)\n      }\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Conexión Inválida\",\n        text: \"No se pudo establecer la conexión con el servidor\"\n      });\n    }\n  };\n  const ClickBtnBuscar = async () => {\n    let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/ConsultaEmpleadosPorNombreCorreo?Nombre_Empleado=${encodeURIComponent(Gestor.Nombre_Empleado)}&Correo_Empleado=${encodeURIComponent(Gestor.Correo_Empleado)}`;\n    try {\n      let Empleados = await fetch(URL).then(async response => {\n        if (!response.ok) {\n          console.log(\"No Ok - ClickBtnBuscar\");\n          throw new Error(response.statusText);\n        }\n        return await response.json();\n      }).catch(error => {\n        console.log(error);\n      });\n      if (Empleados.Codigo >= 0) {\n        setListaEmpleados(Empleados.Contenido);\n      } else {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text: Empleados.Mensaje\n        });\n      }\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Conexión Inválida\",\n        text: \"No se pudo establecer la conexión con el servidor\"\n      });\n    }\n  };\n  const cargarEmpleados = async () => {\n    let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/ConsultaEmpleado?ID_Empleado=`;\n    try {\n      let Empleados = await fetch(URL).then(async response => {\n        if (!response.ok) {\n          console.log(\"No Ok\");\n          throw new Error(response.statusText);\n        }\n        return await response.json();\n      }).catch(error => {\n        console.log(error);\n      });\n      if (Empleados.Codigo >= 0) {\n        setListaEmpleados(Empleados.Contenido);\n      } else {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text: Empleados.Mensaje\n        });\n        //console.log(Empleados.Mensaje)\n      }\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Conexión Inválida\",\n        text: \"No se pudo establecer la conexión con el servidor\"\n      });\n    }\n  };\n  const [ListaEmpleados, setListaEmpleados] = useState([]);\n  useEffect(() => {\n    cargarEmpleados();\n    //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EncabezadoEmpleado, {\n      ClickBtnNuevo: ClickBtnNuevo,\n      ClickBtnBuscar: ClickBtnBuscar,\n      teclaPresionada: teclaPresionada,\n      Gestor: Gestor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DetalleBusquedaEmpleado, {\n      ListaEmpleados: ListaEmpleados,\n      DetalleEmpleado: DetalleEmpleado,\n      ClickBtnDelete: ClickBtnDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(BusquedaEmpleado, \"AGF9ITUQXUlnvKDtn/gr11PjyNY=\", false, function () {\n  return [useNavigate];\n});\n_c = BusquedaEmpleado;\nexport default BusquedaEmpleado;\nvar _c;\n$RefreshReg$(_c, \"BusquedaEmpleado\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Swal","DetalleBusquedaEmpleado","EncabezadoEmpleado","jsxDEV","_jsxDEV","Fragment","_Fragment","BusquedaEmpleado","props","_s","Gestor","setGestor","Nombre_Empleado","Correo_Empleado","navigate","teclaPresionada","e","name","value","target","ClickBtnNuevo","CambiarIdEmpleado","DetalleEmpleado","ClickBtnDelete","ID_Empleado","URL","ApiPort","Result","fetch","method","then","response","ok","console","log","Error","statusText","json","catch","error","Codigo","fire","icon","title","showConfirmButton","timer","ClickBtnBuscar","text","Mensaje","encodeURIComponent","Empleados","setListaEmpleados","Contenido","cargarEmpleados","ListaEmpleados","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/proyectos/FrontEndInventorySystem/src/Empleado/BusquedaEmpleado.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Swal from 'sweetalert2'\r\nimport DetalleBusquedaEmpleado from \"./DetalleBusquedaEmpleado\";\r\nimport EncabezadoEmpleado from \"./EncabezadoEmpleado\";\r\n\r\nconst BusquedaEmpleado = (props) => {\r\n    const [Gestor, setGestor] = useState({\r\n        Nombre_Empleado: '',\r\n        Correo_Empleado: ''\r\n\r\n    })\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const teclaPresionada = (e) => {\r\n        const { name, value } = e.target\r\n        setGestor({ ...Gestor, [name]: value })\r\n    }\r\n\r\n    const ClickBtnNuevo = () => {\r\n        props.CambiarIdEmpleado(0)\r\n        navigate(\"/Empleado/DetalleEmpleado\")\r\n    }\r\n\r\n    const DetalleEmpleado = (Correo_Empleado) => {\r\n        props.CambiarIdEmpleado(Correo_Empleado)\r\n        navigate(\"/Empleado/DetalleEmpleado\")\r\n    }\r\n\r\n    const ClickBtnDelete = async (ID_Empleado) => {\r\n        let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/EliminarEmpleado?ID_Empleado=${ID_Empleado}`;\r\n        try {\r\n            let Result = await fetch(URL, {\r\n                method: 'DELETE'\r\n            }).then(async response => {\r\n                if (!response.ok) {\r\n                    console.log(\"No Ok - ClickBtnDelete\")\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return await response.json()\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n            if (Result.Codigo >= 0) {\r\n                Swal.fire({\r\n                    icon: \"success\",\r\n                    title: \"Registro de empleado eliminado exitosamente\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500\r\n                });\r\n                ClickBtnBuscar()\r\n            }\r\n            else {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"Oops...\",\r\n                    text: Result.Mensaje\r\n                });\r\n                //console.log(Sucursales.Mensaje)\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Conexión Inválida\",\r\n                text: \"No se pudo establecer la conexión con el servidor\"\r\n            });\r\n        }\r\n    }\r\n\r\n    const ClickBtnBuscar = async () => {\r\n        let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/ConsultaEmpleadosPorNombreCorreo?Nombre_Empleado=${encodeURIComponent(Gestor.Nombre_Empleado)}&Correo_Empleado=${encodeURIComponent(Gestor.Correo_Empleado)}`;\r\n        try {\r\n            let Empleados = await fetch(URL).then(async response => {\r\n                if (!response.ok) {\r\n                    console.log(\"No Ok - ClickBtnBuscar\")\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return await response.json()\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n            if (Empleados.Codigo >= 0) {\r\n                setListaEmpleados(Empleados.Contenido)\r\n            }\r\n            else {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"Oops...\",\r\n                    text: Empleados.Mensaje\r\n                });\r\n                \r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Conexión Inválida\",\r\n                text: \"No se pudo establecer la conexión con el servidor\"\r\n            });\r\n        }\r\n    }\r\n\r\n    const cargarEmpleados = async () => {\r\n        let URL = `http://localhost:${props.ApiPort}/api/ApiEmpleado/ConsultaEmpleado?ID_Empleado=`\r\n        try {\r\n            let Empleados = await fetch(URL).then(async response => {\r\n                if (!response.ok) {\r\n                    console.log(\"No Ok\")\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return await response.json()\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n            if (Empleados.Codigo >= 0) {\r\n                setListaEmpleados(Empleados.Contenido)\r\n            }\r\n            else {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"Oops...\",\r\n                    text: Empleados.Mensaje\r\n                });\r\n                //console.log(Empleados.Mensaje)\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Conexión Inválida\",\r\n                text: \"No se pudo establecer la conexión con el servidor\"\r\n            });\r\n        }\r\n    }\r\n\r\n    const [ListaEmpleados, setListaEmpleados] = useState([])\r\n\r\n    useEffect(() => {\r\n        cargarEmpleados();\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    return <>\r\n        <EncabezadoEmpleado ClickBtnNuevo={ClickBtnNuevo}\r\n            ClickBtnBuscar={ClickBtnBuscar}\r\n            teclaPresionada={teclaPresionada}\r\n            Gestor={Gestor} />\r\n        <DetalleBusquedaEmpleado \r\n            ListaEmpleados={ListaEmpleados}\r\n            DetalleEmpleado={DetalleEmpleado}\r\n            ClickBtnDelete={ClickBtnDelete} />\r\n    </>\r\n}\r\nexport default BusquedaEmpleado;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}